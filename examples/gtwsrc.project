# ex: set filetype=sh:
# GTWS project level config

if [ -n "${GTWS_PROJECT_GUARD}" ]; then
	debug_print "Project already loaded"
	return
fi
GTWS_PROJECT_GUARD="yes"
debug_print "Loading Project"

# Stuff for GTWS
export GTWS_PROJECT="enkive"

# Optionally specify repos to clone. Defaults to all repos in origin
#export GTWS_PROJECT_REPOS="foo bar baz"

# If non-standard orgin layout is used, define this function

# gtws_project_clone ${GTWS_ORIGIN} ${GTWS_PROJECT} ${GTWS_PROJECT_VERSION} ${GTWS_WSNAME}
#
# Clone a version of a project into ${GTWS_WSPATH} (which is the current working directory)
#function gtws_project_clone {
	#local origin=$1
	#local project=$2
	#local version=$3
	#local name=$4
	#local opvn=$(gtws_opv "${origin}" "${project}" "${version}")/${name}
	#local wspath=${PWD}

	#for repo in ${GTWS_PROJECT_REPOS}; do
		#local rpath="${opvn}/${repo}"
		#git clone "${rpath}" || die "failed to clone ${rpath}"
	#done
#}


# If post-clone setup is desired, define this function

# gtws_project_setup ${GTWS_WSNAME} ${GTWS_ORIGIN} ${GTWS_PROJECT} ${GTWS_PROJECT_VERSION}
#
# Post clone setup of a workspace in ${GTWS_WSPATH} (which is PWD)
function gtws_project_setup {
	local wsname=$1
	local origin=$2
	local project=$3
	local version=$4
	local wspath=${PWD}
	local opg="${origin}/${project}/gtws"

	for i in "${wspath}"/*; do
		cd "${i}/src" 2>/dev/null || cd ${i} || die "Couldn't cd to ${i}"
		maketags > /dev/null 2> /dev/null &
		cd ${wspath} || die "Couldn't cd to ${wspath}"
	done

	mkdir "${wspath}"/build
	mkdir "${wspath}"/install

	#cd "${wspath}/enkive" || die "Failed to cd to ${wspath}/enkive"
	#echo "Creating build.properties"
	#scp "${opg}/build.properties" "." ||
		#die "Couldn't copy build.properties"
	#sed -i "s#@GTWSJAVAPATH@#${GTWS_JAVA_PATH}#" "build.properties" ||
		#die "java sed failed"

	#echo "Creating .project"
	#scp "${opg}/enkive.project" ".project" ||
		#die "Couldn't copy .project"
	#sed -i "s#@NAME@#${i}#" ".project" ||
		#die "project name sed failed"
	#git update-index --assume-unchanged .project ||
		#die "unchanged project failed"

	#sed -i "s#kind=\"var\" path=\"ENKIVE_JAVA#kind=\"lib\" path=\"${GTWS_JAVA_PATH}#" ".classpath" ||
		#die "ENKIVE_JAVA sed failed"
	#sed -i "s#kind=\"var\" path=\"INDRI_INSTALL#kind=\"lib\" path=\"/opt/indri#" ".classpath" ||
		#die "INDRI_INSTALL sed failed"
	#git update-index --assume-unchanged .classpath ||
		#die "unchanged classpath failed"
	#cd ${wspath} || die "Couldn't cd to ${wspath}"

	#echo "Setting up eclipse"
	#scp -r "${opg}/.metadata/" .
}


# If pre-delete cleanup during removal is desired, define this function

# gtws_project_cleanup ${GTWS_WSNAME} ${GTWS_PROJECT} ${GTWS_PROJECT_VERSION}
#
# Pre-delete cleanup of a workspace in ${GTWS_WSPATH} (which is PWD)
#function gtws_project_cleanup {
	#local wsname=$1
	#local wspath=$1
	#local project=$2
	#local version=$3
	#local wspath=${PWD}

	#rm -rf "/casa/${USER}/test/working/${version}/${wsname}"
#}

# Allow WS to make things installed locally be runnable
export GTWS_LD_LIBRARY_PATH="${GTWS_WSPATH}/install/lib:${GTWS_WSPATH}/install/lib64"
export GTWS_PYTHONPATH="${GTWS_WSPATH}/install/lib/python2.7/site-packages"

# Stuff specific to this project.  It can be assumed that the following are set:
#	GTWS_WSPATH - Path to the workspace
#	GTWS_WSNAME - Name of the workspace
#export GTWS_FILES_EXTRA="${GTWS_FILES_EXTRA} .syntastic_c_config"
#export ENKIVE_HOME="${GTWS_WSPATH}/enkive"
#export GTWS_PATH_EXTRA="${ENKIVE_HOME}/scripts"
#export ENKIVE_USER=${USER:-dang}
export CMAKE_SETTINGS="-DCMAKE_BUILD_TYPE:STRING=Debug -DCMAKE_INSTALL_PREFIX=${GTWS_WSPATH}/install"
alias ccmake="cmake ${CMAKE_SETTINGS}"

# Local aliases/functions
#alias eclipse="/usr/bin/eclipse -data ${GTWS_WSPATH} -noSplash"
#function sudo() {
	#/usr/bin/sudo LD_LIBRARY_PATH=${LD_LIBRARY_PATH} PYTHONPATH=${PYTHONPATH} $@
#}

function wspush() {
	local WSBASE=$(basename $PWD)
	git push && cdorigin ${WSBASE} && git reset --hard && git push && cd - && git sync
}

# Override grepall to skip the build directories
function grepall {
	ack --ignore-dir=build "$@"
}
