# ex: set filetype=sh:
# GTWS project level config

if [ -n "${GTWS_PROJECT_GUARD}" ]; then
	debug_print "Project already loaded"
	return
fi
GTWS_PROJECT_GUARD="yes"
debug_print "Loading Project"

# Stuff for GTWS
export GTWS_PROJECT=$(basename $(dirname $(readlink -f ${BASH_SOURCE})))
export GTWS_MAKETAGS_OPTS=${GTWS_MAKETAGS_OPTS:-""}
export GTWS_DOCKER_BASE_IMAGE=${GTWS_DOCKER_BASE_IMAGE:-${GTWS_DEFAULT_DOCKER_BASE_IMAGE}}
export GTWS_DOCKER_IMAGE=${GTWS_DOCKER_IMAGE:-${GTWS_DEFAULT_DOCKER_IMAGE}}

# Optionally specify repos and branches to clone. Defaults to all repos in
# origin with GTWS_PROJECT_VERSION as the branch.
#export GTWS_PROJECT_REPOS=${GTWS_PROJECT_REPOS:-"foo bar:barbranch baz"}
# If cloning an entire remote workspace, set this
#export GTWS_REMOTE_IS_WS=${GTWS_REMOTE_IS_WS:-"yes"}
# Modules for gtws_kmod_install
#export GTWS_KMOD_LIST=${GTWS_KMOD_LIST:-"fs/nfs/placelayout/nfs_layout_nfsv41_placement.ko fs/nfs/nfsv4.ko"}

# If non-standard orgin layout is used, define these two functions

# gtws_project_clone ${GTWS_ORIGIN} ${GTWS_PROJECT} ${GTWS_PROJECT_VERSION} ${GTWS_WSNAME} ${SUBMODULE_BASE}
#
# Clone a version of a project into ${GTWS_WSPATH} (which is the current working directory)
#function gtws_project_clone {
	#local origin=$1
	#local project=$2
	#local version=$3
	#local name=$4
	#local smbase=$5
	#local opvn=$(gtws_opvn "${origin}" "${project}" "${version}" "${name}")
	#local wspath=${PWD}

	#for repo in ${GTWS_PROJECT_REPOS}; do
		#local rpath="${opvn}/${repo}"
		#git clone --recurse-submodules "${rpath}" || die "failed to clone ${rpath}"
	#done
#}

#function gtws_project_cdorigin() {
	#local opv=$(gtws_opvn "${GTWS_ORIGIN}" "${GTWS_PROJECT}" "${GTWS_PROJECT_VERSION}" "${GTWS_WSNAME}")
	#if [ ! -d "${opv}" ]; then
		#die "No origin for $@"
	#fi
	#cd "${opv}/$@"
#}


# If custom post-clone setup is desired, define this function

# gtws_repo_setup_local ${wspath} ${repo_path}
#
# It will be called after the repo is cloned and set up
#
# Post-clone setup for an individual repo
#function gtws_repo_setup_local {
	#local wspath=$1
	#local rpath=$2
	#local savedir="${PWD}"

	#cd ${rpath} || die "Couldn't cd to ${rpath}" || return 1
	#if [ -x "src/scripts/git_hooks/install_git_hooks.sh" ]; then
		#./src/scripts/git_hooks/install_git_hooks.sh
	#fi
#}


# If custom project final setup is desired, define this function

# gtws_project_setup_local ${GTWS_WSNAME} ${GTWS_ORIGIN} ${GTWS_PROJECT} ${GTWS_PROJECT_VERSION}
#
# This is called after the global project setup.
#
# Final setup of a workspace in ${GTWS_WSPATH} (which is PWD)
#function gtws_project_setup_local {
	#local wsname=$1
	#local origin=$2
	#local project=$3
	#local version=$4
	#local wspath=${PWD}
	#local opg="${origin}/${project}/gtws"

	## Setup local to this project
	#cd "${wspath}/enkive" || die "Failed to cd to ${wspath}/enkive"
	#echo "Creating build.properties"
	#scp "${opg}/build.properties" "." ||
		#die "Couldn't copy build.properties" || return 1
	#sed -i "s#@GTWSJAVAPATH@#${GTWS_JAVA_PATH}#" "build.properties" ||
		#die "java sed failed" || return 1

	#echo "Creating .project"
	#scp "${opg}/enkive.project" ".project" ||
		#die "Couldn't copy .project" || return 1
	#sed -i "s#@NAME@#${i}#" ".project" ||
		#die "project name sed failed" || return 1
	#git update-index --assume-unchanged .project ||
		#die "unchanged project failed" || return 1

	#sed -i "s#kind=\"var\" path=\"ENKIVE_JAVA#kind=\"lib\" path=\"${GTWS_JAVA_PATH}#" ".classpath" ||
		#die "ENKIVE_JAVA sed failed" || return 1
	#sed -i "s#kind=\"var\" path=\"INDRI_INSTALL#kind=\"lib\" path=\"/opt/indri#" ".classpath" ||
		#die "INDRI_INSTALL sed failed" || return 1
	#git update-index --assume-unchanged .classpath ||
		#die "unchanged classpath failed" || return 1
	#cd ${wspath} || die "Couldn't cd to ${wspath}" || return 1

	#echo "Setting up eclipse"
	#scp -r "${opg}/.metadata/" .
#}


# If pre-delete cleanup during removal is desired, define this function

# gtws_project_cleanup ${GTWS_WSNAME} ${GTWS_PROJECT} ${GTWS_PROJECT_VERSION}
#
# Pre-delete cleanup of a workspace in ${GTWS_WSPATH} (which is PWD)
#function gtws_project_cleanup {
	#local wsname=$1
	#local wspath=$1
	#local project=$2
	#local version=$3
	#local wspath=${PWD}

	#rm -rf "/casa/${USER}/test/working/${version}/${wsname}"
#}

# Allow WS to make things installed locally be runnable
export GTWS_LD_LIBRARY_PATH=${GTWS_LD_LIBRARY_PATH:-"${GTWS_PREFIX}/lib:${GTWS_PREFIX}/lib64"}
PYVERSION=$(basename $(dirname $(python -m site --user-site)))
export GTWS_PYTHONPATH=${GTWS_PYTHONPATH:-"${GTWS_PREFIX}/lib/${PYVERSION}/site-packages"}

#if [ "${USER}" == "root" ]; then
	## Things to set if your root
	##ulimit -Hn 999999
	##ulimit -Sn 999999
#fi

# Stuff specific to this project.  It can be assumed that the following are set:
#	GTWS_WSPATH - Path to the workspace
#	GTWS_WSNAME - Name of the workspace
#export GTWS_FILES_EXTRA=${GTWS_FILES_EXTRA:-"${GTWS_FILES_EXTRA} extra/.project.vim:src"}
#export ENKIVE_HOME=${ENKIVE_HOME:-"${GTWS_WSPATH}/enkive"}
#export GTWS_PATH_EXTRA=${GTWS_PATH_EXTRA:-"${ENKIVE_HOME}/scripts"}
#export ENKIVE_USER=${ENKIVE_USER:-${USER:-dang}}
# Uncomment to use clang instead of gcc
#export CC=clang
#export CXX=clang++
export GTWS_CMAKE_SETTINGS=${GTWS_CMAKE_SETTINGS:-"-DCMAKE_BUILD_TYPE:STRING=Maintainer -DCMAKE_INSTALL_PREFIX=${GTWS_PREFIX}"}
function ccmake {
	cmake ${GTWS_CMAKE_SETTINGS} $@
}
export CFLAGS=${CFLAGS:-"-O0 -g -gdwarf-4"}
export CXXFLAGS=${CXXFLAGS:-"${CFLAGS}"}

function gtws_cmake {
(
	local src=$(basename ${PWD})
	local idir=""
	local dir=$(basename $(dirname ${PWD}))
	if [  "${dir}" != "build" ]; then
		idir="${dir}/"
		dir=$(basename $(dirname $(dirname ${PWD})))
	fi
	if [  "${dir}" != "build" ]; then
		die "Not in a build directory"
	fi
	local cmkdir="${GTWS_WSPATH}/${idir}${src}"
	if [ ! -f "${cmkdir}"/CMakeLists.txt ]; then
		cmkdir="${GTWS_WSPATH}/${idir}${src}/src"
	fi
	if [ ! -f "${cmkdir}"/CMakeLists.txt ]; then
		die "Could not find CMakeLists.txt in \"${GTWS_WSPATH}/${idir}${src}\" or \"${GTWS_WSPATH}/${idir}${src}/src\""
	fi
	echo "Building for ${src}"
	read -p "Delete? "
	cd .. && rm -rf "${src}" && mkdir "${src}" && cd "${src}" && ccmake $@ "${cmkdir}"
	echo "Done"
)
	cd .
}

# Local aliases/functions
#alias eclipse="/usr/bin/eclipse -data ${GTWS_WSPATH} -noSplash"
#function sudo() {
	#/usr/bin/sudo LD_LIBRARY_PATH=${LD_LIBRARY_PATH} PYTHONPATH=${PYTHONPATH} $@
#}

function wspush() {
	local WSBASE=$(basename $PWD)
	#git push && cdorigin ${WSBASE} && git reset --hard && git push && cd - && git sync
	git push && cdorigin ${WSBASE} && git push && cd - && git sync
}

# Override grepall to skip the build directories
function grepall {
	ack --follow --ignore-dir=build "$@"
}


function gtws_kmod_install {
	if [ -z "${GTWS_KMOD_LIST}" ]; then
		echo "Please set GTWS_KMOD_LIST"
		return -1
	fi
	uname=$(uname -r)
	mnames=""
	for mod in ${GTWS_KMOD_LIST}; do
		mnames="${mnames} $(basename ${mod} .ko)"
	done
	echo rmmod ${mnames}
	sudo rmmod ${mnames}
	for mod in ${GTWS_KMOD_LIST}; do
		mpath=$(dirname ${mod})
		sudo install -m 744 ${mod} /lib/modules/${uname}/kernel/${mpath}
	done
	echo depmod -a
	sudo depmod -a
	sudo cp arch/x86/boot/bzImage /boot/vmlinuz-${uname}
	echo modprobe -a ${mnames}
	sudo modprobe -a ${mnames}
	echo "Done"
}
