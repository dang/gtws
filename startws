#!/bin/bash
#
# Start session in a workspace
#

if [ -f "${PWD}/.gtwsrc" ]; then
	source "${PWD}/.gtwsrc"
else
	source "${HOME}/.gtwsrc"
fi

VERSION=${GTWS_PROJECT_VERSION:-trunk}

if [ -n "${GTWS_PROJECT}" ]; then
	PROJECT="${GTWS_PROJECT}"
elif [ -n "${GTWS_DEFAULT_PROJECT}" ]; then
	PROJECT="${GTWS_DEFAULT_PROJECT}"
else
	PROJECT=$(basename $(dirname "$PWD"));
fi

# Set usage output
USAGE="[-h |--help] [-p <project> | --project=<project>] [-v <version> | --version=<version>] <name>"
LONGUSAGE="\t-h, --help\n\t\tPrint this help message
\t-p <project>, --project=<project>\n\t\tProject (default: ${PROJECT:-none})
\t-v <version>, --version=<version>\n\t\tProject version (default: ${VERSION})
\t<name>\n\t\tWorkspace name"

# Standard functions
GTWSLOC=$(readlink -f $(dirname "$0"))
source ${GTWSLOC}/gtws.sh

# Script name
ME=$(basename $0)

# Parse arguments
ARGS=`getopt -o hp:v: --long help,project:,version: -n "${ME}" -- "$@"`

if [ $? != 0 ] ; then
	usage 
fi
eval set -- "$ARGS"

while true ; do
	case "$1" in
		-h|--help) usage; shift ;;
		-p|--project) PROJECT=$2 ; shift 2 ;;
		-v|--version) VERSION=$2 ; shift 2 ;;
		--) shift ; break ;;
		* ) usage "Invalid argument $1";;
	esac
done

# Remaining arguments are in $1, $2, etc. as normal
if [ -z "${1}" ]; then
	usage "Must give a workspace name"
fi

NAME="${1}"

BASE=${GTWS_BASE_SRCDIR:-${HOME}/src}

if [ ! -f ${BASE}/${PROJECT}/${VERSION}/${NAME}/.gtwsrc ]; then
	usage "No env for ${PROJECT}/${VERSION}/${NAME}"
fi

exec bash --rcfile ${BASE}/${PROJECT}/${VERSION}/${NAME}/.gtwsrc
