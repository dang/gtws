#!/bin/bash
#
# Create a new GateD development workspace
#

GATED=$(basename "${PWD}")

# Set usage output
USAGE="[-h |--help] [-a | --all-rtos] [-r <rtos> | --rtos=<rtos>] [-v <version> | --version=<version>] <name>"
LONGUSAGE="\t-h, --help\n\t\tPrint this help message
\t-v <version>, --version=<version>\n\t\tGateD version (default: ${GATED})
\t-a, --all-rtos\n\t\t Get all rtos versions
\t-s, --supported-rtos\n\t\t Get all supported rtos versions
\t-r <rtos>, --rtos=<rtos>\n\t\tRTOS version (default: depends on GateD version)
\t<name>\n\t\tWorkspace name"

# Standard functions
source ${GTWS}/gtws.sh

set_default_rtos "${GATED}"
WSBASE="${GTWS_ORIGIN:-${HOME}/origin}"
WSDIRS="routing docs gatt"

# Script name
ME=$(basename $0)

# Parse arguments
ARGS=`getopt -o hasr:v: --long help,all-rtos,supported-rtos,rtos:,version: -n "${ME}" -- "$@"`

if [ $? != 0 ] ; then
	usage 
fi
eval set -- "$ARGS"

while true ; do
	case "$1" in
		-h|--help) usage; shift ;;
		-v|--version) GATED=$2 ; shift 2 ;;
		-r|--rtos) RTOS=$2 ; shift 2 ;;
		-a|--all-rtos) ALL="yes"; shift ;;
		-s|--supported-rtos) SUPP="yes"; shift ;;
		--) shift ; break ;;
		* ) usage "Invalid argument $1";;
	esac
done

# Remaining arguments are in $1, $2, etc. as normal
if [ -z "${1}" ]; then
	usage "Must give a workspace name"
fi

WSPATH=$(readlink -f "${1}")
WSNAME=$(basename "${WSPATH}")

# Workspace check
WS="${WSBASE}/${GATED}"
if [ ! -d "${WS}" ]; then
	die "No workspace for ${WS}"
fi
if [ ! -d "${WSBASE}/${RTOS}" ]; then
	die "No ${RTOS} in ${WSBASE}"
fi

# Workspace contents check
for i in ${WSDIRS}; do
	if [ ! -d "${WS}/${i}" ]; then
		die "No ${i} in workspace ${WS}"
	fi
done

# Target directory check
if [ -d "${WSPATH}" ]; then
	die "Workspace ${WSPATH} already exists"
fi

if [ -n "${ALL}" ]; then
	TARGET="all"
elif [ -n "${SUPP}" ]; then
	TARGET=${RTOS_SUPP}
fi

# Make workspace
echo "Making workspace for ${GATED}:${TARGET} in ${WSPATH}"

mkdir -p "${WSPATH}" || die "Failed to mkdir ${WSPATH}"
cd "${WSPATH}"

for i in ${WSDIRS}; do
	git clone "${WS}/${i}" || die "failed to clone ${i}"
	cp "${WS}/${i}/.git/info/exclude" "${i}/.git/info/" || die "failed to copy exclude"
	if [ -f "${WS}/${i}/.project.vim" ]; then
		cp "${WS}/${i}/.project.vim" "${i}/" || die "failed to copy .project.vim"
	fi
done

if [ -n "${ALL}" ]; then
	rtos-clone -a
elif [ -n "${SUPP}" ]; then
	for r in ${RTOS_SUPP}; do
		rtos-clone "${r}" || die "failed to clone ${r}"
	done
else
	rtos-clone "${RTOS}" || die "failed to clone ${r}"
fi

# Set up GateD
cd "${WSPATH}/routing" || die "failed to cd to routing"
export SYSTEM_HDRS="../${RTOS}/INTEGRITY-include /share/ghs/comp/current"
maketags -c

# Set up GATT
cd "${WSPATH}/gatt" || die "failed to cd to gatt"
maketags -p -c

# Add dmltools to docs
cd "${WSPATH}/docs" || die "failed to cd to docs"
git clone "${WSBASE}/dmltools" || die "failed to clone dmltools"

# Set up workdirs
echo "Making workdirs"
export GATED_TOOLS_PATH="${WSPATH}/gatt"
export GATED_TOOLS_HOMEDIR="/casa/${USER}/test/working/${GATED}/${WSNAME}"
if [ -d "${GATED_TOOLS_HOMEDIR}" ]; then
	rm -rf "${GATED_TOOLS_HOMEDIR}"
fi
mkdir -p "${GATED_TOOLS_HOMEDIR}"
${GATED_TOOLS_PATH}/scripts/mkworkdirs

if [ -n "${GTWS_NOPROMPT}" ]; then
	PROMPT=""
else
	PROMPT="(${GATED}-${WSNAME})"
fi

echo "Creating .tools.env"
cat > "${WSPATH}"/.tools.env << EOF
source ${GTWS}/gtws.sh
export CURWS="${WSNAME}"
export WSVER="${GATED}"
export GATED_TOOLS_PATH="${GATED_TOOLS_PATH}"
export GATED_TEST_DIR="\$GATED_TOOLS_PATH/tests";
export GATED_TOOLS_HOMEDIR="${GATED_TOOLS_HOMEDIR}"
export TESTG_INTEGRITY=${TESTG_INTEGRITY:-1}
export TESTG_INTEGRITY_NOKILL=${TESTG_INTEGRITY_NOKILL:-1}
export TESTG_PAUSE_ON_FAIL=${TESTG_PAUSE_ON_FAIL:-1}
export TESTG_GHNET=${TESTG_GHNET:-1}
PATH=$MYPATH:"\$GATED_TOOLS_PATH/scripts"
export PATH

function autobot {
	if [ -z "\${1}" ]; then
		echo "Give some tests"
		echo "Usage: autobot <testfile> <racks> [<rtosver>] [<autobot-arg>...]"
		return
	fi
	if [ -z "\${2}" ]; then
		echo "Give some racks"
		echo "Usage: autobot <testfile> <racks> [<rtosver>] [<autobot-arg>...]"
		return
	fi

	TESTFILE="\${1}"
	if [ -n "\${3}" ]; then
		RACK=\${2}
		RTOS=\${3}
		shift 3
	else
		RACK=\${2}
		RTOS="$RTOS"
		shift 2
	fi
	
	./autobot.pl -rtos_dir ${WSPATH}/\${RTOS}/ -kernel gated-userspace -rack \${RACK} -tests \${TESTFILE} \$@
}

title "${GATED}-${WSNAME}"
PS1="${PROMPT}\${PS1}"
EOF

