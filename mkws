#!/bin/bash
#
# Create a new Project development workspace
#

function GTWScleanup {
	rm -rf "${WSPATH}"
}

# Standard functions
GTWSLOC=$(readlink -f $(dirname "$0"))
source ${GTWSLOC}/gtws.sh

if [ -f "${PWD}/.gtwsrc" ]; then
	load_rc "${PWD}"
else
	source "${HOME}/.gtwsrc"
fi

if [ -n "${GTWS_PROJECT_VERSION}" ]; then
	VERSION="${GTWS_PROJECT_VERSION}"
elif [ -n "${GTWS_DEFAULT_PROJECT_VERSION}" ]; then
	VERSION="${GTWS_DEFAULT_PROJECT_VERSION}"
else
	VERSION=$(basename "$PWD");
fi

if [ -n "${GTWS_PROJECT}" ]; then
	PROJECT="${GTWS_PROJECT}"
elif [ -n "${GTWS_DEFAULT_PROJECT}" ]; then
	PROJECT="${GTWS_DEFAULT_PROJECT}"
else
	PROJECT=$(basename $(dirname "$PWD"));
fi

# Set usage output
USAGE="[-h |--help] [-p <project> | --project=<project>] [-v <version> | --version=<version>] [-V | --verbose] <name>"
LONGUSAGE="\t-h, --help\n\t\tPrint this help message
\t-p <project>, --project=<project>\n\t\tProject (default: ${PROJECT:-none})
\t-v <version>, --version=<version>\n\t\tProject version (default: ${VERSION})
\t-V, --verbose\n\t\tBe verbose
\t<name>\n\t\tWorkspace name"

# Script name
ME=$(basename $0)

# Parse arguments
ARGS=`getopt -o hVp:v: --long help,verbose,project:,version: -n "${ME}" -- "$@"`

if [ $? != 0 ] ; then
	usage 
fi
eval set -- "$ARGS"

while true ; do
	case "$1" in
		-h|--help) usage; shift ;;
		-p|--project) PROJECT=$2 ; shift 2 ;;
		-v|--version) VERSION=$2 ; shift 2 ;;
		-V|--verbose) export GTWS_VERBOSE=yes; shift ;;
		--) shift ; break ;;
		* ) usage "Invalid argument $1";;
	esac
done

# Remaining arguments are in $1, $2, etc. as normal
if [ -z "${1}" ]; then
	usage "Must give a workspace name"
fi

if [ -z "${PROJECT}" ]; then
	usage "Must give a project"
fi

if [ -z "${GTWS_PROJECT}" ]; then
	# We weren't in a project directory; go there
	BASE="${GTWS_BASE_SRCDIR:-${HOME}/src}/${PROJECT}/${VERSION}"
	cd "${BASE}" || die "Couldn't cd to project dir ${BASE}"
elif [ "${PROJECT}" != "${GTWS_PROJECT}" ]; then
	die "In wrong project dir: expected ${PROJECT} got ${GTWS_PROJECT}"
fi

WSPATH=$(readlink -f "${1}")
WSNAME=$(basename "${WSPATH}")

# Target directory check
if [ -d "${WSPATH}" ]; then
	die "Workspace ${WSPATH} already exists"
fi

# Set up the environment
mkdir -p "${WSPATH}" || die "Failed to mkdir ${WSPATH}"
cd "${WSPATH}"
cp "${GTWSLOC}"/gtwsrc "${WSPATH}"/.gtwsrc
source "${WSPATH}"/.gtwsrc

# Origin
O="${GTWS_ORIGIN:=${HOME}/origin}"

HAS_CLONE=$(declare -F | grep "\<gtws_project_clone\>")
echo "$HAS_CLONE"
if [ -z "${HAS_CLONE}" ]; then
	# Origin check for default
	if [ ! -d "${O}/${PROJECT}" ]; then
		die "No origin for ${PROJECT}"
	fi
	# Workspace contents check
	found=""
	for i in "${O}/${PROJECT}/${VERSION}"/*; do
		if [ ! -d "${i}/.git" ]; then
			die "${i} in origin ${O}/${PROJECT}/${VERSION} is not git"
		fi
		found="yes"
	done

	if [ -z "$found" ]; then
		die "No git repos in origin ${O}/${PROJECT}/${VERSION}"
	fi
fi

# Make workspace
echo "Making workspace for ${VERSION}:${TARGET} in ${WSPATH}"
# Made directory above

touch "${WSPATH}/.sdirs"

if [ -n "${HAS_CLONE}" ]; then
	# Project provided a clone
	gtws_project_clone ${O} ${PROJECT} ${VERSION} || die "clone failed"
else
	# Default clone
	gtws_project_clone_default ${O} ${PROJECT} ${VERSION} || die "clone failed"
fi

if [ -n "$(declare -F | grep "gtws_project_setup")" ]; then
	gtws_project_setup ${WSNAME} ${O} ${PROJECT} ${VERSION} || die "setup failed"
fi

echo "Done"
