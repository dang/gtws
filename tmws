#!/bin/bash
#
# Start or attach to a tmux session in a workspace
#

if [ -f "${PWD}/.gtwsrc" ]; then
	source "${PWD}/.gtwsrc"
else
	source "${HOME}/.gtwsrc"
fi

VERSION=${GTWS_PROJECT_VERSION:-trunk}

if [ -n "${GTWS_PROJECT}" ]; then
	PROJECT="${GTWS_PROJECT}"
elif [ -n "${GTWS_DEFAULT_PROJECT}" ]; then
	PROJECT="${GTWS_DEFAULT_PROJECT}"
fi


# Set usage output
USAGE="[-h |--help] [-p <project> | --project=<project>] [-v <version> | --version=<version>] <name>"
LONGUSAGE="\t-h, --help\n\t\tPrint this help message
\t-p <project>, --project=<project>\n\t\tProject (default: ${PROJECT:-none})
\t-v <version>, --version=<version>\n\t\tProject version (default: ${VERSION})
\t<name>\n\t\tWorkspace name"

# Standard functions
GTWSLOC=$(readlink -f $(dirname "$0"))
source ${GTWSLOC}/gtws.sh

# Script name
ME=$(basename $0)

# Parse arguments
ARGS=`getopt -o hp:v: --long help,project:,version: -n "${ME}" -- "$@"`

if [ $? != 0 ] ; then
	usage 
fi
eval set -- "$ARGS"

while true ; do
	case "$1" in
		-h|--help) usage; shift ;;
		-p|--project) PROJECT=$2 ; shift 2 ;;
		-v|--version) VERSION=$2 ; shift 2 ;;
		--) shift ; break ;;
		* ) usage "Invalid argument $1";;
	esac
done

# Remaining arguments are in $1, $2, etc. as normal
if [ -z "${1}" ]; then
	usage "Must give a workspace name"
fi

NAME="${1}"
BASE=${GTWS_BASE_SRCDIR:-${HOME}/src}

if [ -n "$TMUX" ]; then
	usage "Do not run from within tmux"
fi

if [ ! -f "${BASE}/${PROJECT}/${VERSION}}/${NAME}/.gtwsrc" ]; then
	usage "No .gtwsrc for ${PROJECT}/${VERSION}}/${NAME}"
	exit 1
fi

SESNAME="${PROJECT}-${NAME}"

cd "${BASE}/${PROJECT}/${VERSION}}/${NAME}"

NUM_SES=$(tmux ls | grep "^${SESNAME}" | wc -l)
if [ "${NUM_SES}" == "0" ]; then
	echo "Launching tmux base session ${SESNAME} ..."
	tmux new-session -s ${SESNAME} -n "Edit" "startws -v ${PROJECT} ${NAME}" \; \
		new-window -n "Build" "startws -v ${PROJECT} ${NAME}" \; \
		split-window -v  "startws -v ${PROJECT} ${NAME}" \; \
		split-window -v  "startws -v ${PROJECT} ${NAME}" \; \
		select-layout even-horizontal \; \
		select-window -t :0
else
	# Kill defunct sessions first
        OLD_SESSIONS=$(tmux ls 2>/dev/null | egrep "^[0-9]{14}.*[0-9]+\)$" | cut -f 1 -d:)
	for SESSION in ${OLD_SESSIONS}; do
		tmux kill-session -t ${SESSION}
	done

	echo "Attaching to workspace ${SESNAME} ..."
	# Session is is date and time to prevent conflict
	SESSION=`date +%Y%m%d%H%M%S`
	# Create a new session (without attaching it) and link to base session 
	# to share windows
	tmux new-session -d -t ${SESNAME} -s ${SESSION}
	# Attach to the new session
	tmux attach-session -t ${SESSION}
	# When we detach from it, kill the session
	tmux kill-session -t ${SESSION}
fi
