#!/bin/bash
#
# Update rtos in a workspace
#

GTWS_WSPATH="${PWD}"

# Set usage output
USAGE="[-h |--help] [-a | --all-rtos] [<rtos> ...]"
LONGUSAGE="\t-h, --help\n\t\tPrint this help message
\t-a, --all-rtos\n\t\t Get all rtos versions
\t<rtos>\n\t\tRTOS version"

# Standard functions
GTWS_LOC=$(readlink -f $(dirname "$0"))
source ${GTWS_LOC}/gtws.sh

# Workspace settings
if [ ! -f ".gtwsrc" ]; then
	die "${PWD} is not a workspace"
fi
source ".gtwsrc"
GTWS_ORIGIN="${GTWS_ORIGIN:-${HOME}/origin}"

# Script name
ME=$(basename $0)

# Parse arguments
ARGS=`getopt -o ha --long help,all: -n "${ME}" -- "$@"`

if [ $? != 0 ] ; then
	usage 
fi
eval set -- "$ARGS"

while true ; do
	case "$1" in
		-h|--help) usage; shift ;;
		-a|--all-rtos) ALL="yes"; shift ;;
		--) shift ; break ;;
		* ) usage "Invalid argument $1";;
	esac
done

# Remaining arguments are in $1, $2, etc. as normal
if [ -n "${1}" ]; then
	RTOS=${@}
fi

if [ -n "${ALL}" ]; then
	RTOS=$(/bin/ls -d i*)
fi

if [ -z "${RTOS}" ]; then
	usage "Must give an rtos version"
fi

for i in ${RTOS}; do
	echo "updating $i"
	cp "${GTWS_ORIGIN}/${i}/.git/info/exclude" "${i}/.git/info/" || die "failed to copy exclude"
	for f in ${GTWS_EXTRA_FILES}; do
		if [ -f "${GTWS_ORIGIN}/${i}/${f}" ]; then
			cp "${GTWS_ORIGIN}/${i}/${f}" "${i}/" || die "failed to copy ${f}"
		fi
	done
	cd "${i}"
	git pull --rebase || die "Pull failed for ${i}"
	./setup > /dev/null 2>&1
	cd "${GTWS_WSPATH}"
	echo ""
done

