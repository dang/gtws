#!/bin/bash
#
# Script that syncs a branch of a repo tracking a remote repo.
# Checks first to make sure there's no uncommited changes on the local branch,
# and fails.
# Basically, this means:
#   git checkout master
#   git pull
#   git checkout <original branch>
#   git pull master
#

# Set usage output
USAGE="[-h |--help] [-f | --force]"
LONGUSAGE="\t-h, --help\n\t\tPrint this help message
\t-f, --force\n\t\tSync even if the local branch is not up-to-date"

# Standard functions
GTWSLOC=$(readlink -f $(dirname "$0"))
source ${GTWSLOC}/gtws.sh

# Script name
ME=$(basename $0)

# Parse arguments
ARGS=`getopt -o hf --long help,force -n "${ME}" -- "$@"`

if [ $? != 0 ] ; then
	usage 
fi
eval set -- "$ARGS"

while true ; do
	case "$1" in
		-h|--help) usage; shift ;;
		-f|--force) FORCE="yes"; shift ;;
		--) shift ; break ;;
		* ) usage "Invalid argument $1";;
	esac
done

# Remaining arguments are in $1, $2, etc. as normal

git branch 2>&1 | grep -i "Not a git repository" > /dev/null 2>/dev/null && die "Not a git repo"

GITDIR="$(git rev-parse --git-dir 2>/dev/null)"
if git-issvn > /dev/null 2>&1; then
	SVN="yes"
fi

if [ -z "${FORCE}" ]; then
	git status | grep clean > /dev/null || die "Current branch is not clean"
fi

TOPLEVEL=$(git rev-parse --show-toplevel)
SAVEDIR=$(PWD)
BRANCH=$(git branch | grep "\*" | sed 's/\* //')
REMOTE=$(git config --get branch.${BRANCH}.remote)
if [ -z "${REMOTE}" ]; then
	UPSTREAM="master"
elif [ "${REMOTE}" == "." ]; then
	# Local tracking branch.  Use it instead of master
	m=$(git config --get branch.${BRANCH}.merge)
	UPSTREAM=${m##*/}
elif [ "${REMOTE}" == "origin" ]; then
	# This branch directly tracks upstream; don't do any form of local upstream
	UPSTREAM=
fi

cd "${TOPLEVEL}"

if [ -n "${UPSTREAM}" ]; then
	echo "Updating ${UPSTREAM} first..."
	git checkout ${UPSTREAM} || die "Could not checkout ${UPSTREAM}"
	if [ -n "${SVN}" ]; then
		git svn rebase || die "rebase of ${UPSTREAM} failed"
	else
		git pull --rebase || die "rebase of ${UPSTREAM} failed"
		git submodule update || die "submodule update of ${UPSTREAM} failed"
	fi
	git checkout ${BRANCH}
fi

echo "Updating ${BRANCH}"
if [ -n "${SVN}" ]; then
	git svn rebase || die "rebase of ${BRANCH} failed"
else
	git pull --rebase || die "rebase of ${BRANCH} failed"
	git submodule update || die "submodule update of ${BRANCH} failed"
fi

cd "${SAVEDIR}"
