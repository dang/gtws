#!/bin/bash
#
# Script that syncs a branch of a repo tracking a remote repo.
# Checks first to make sure there's no uncommited changes on the local branch,
# and fails.
# Basically, this means:
#   git checkout master
#   git pull
#   git checkout <original branch>
#   git pull master
#

# Set usage output
USAGE="[-h |--help] [-f | --force]"
LONGUSAGE="\t-h, --help\n\t\tPrint this help message
\t-f, --force\n\t\tSync even if the local branch is not up-to-date"

# Standard functions
GTWSLOC=$(readlink -f $(dirname "$0"))
source ${GTWSLOC}/gtws.sh

# Script name
ME=$(basename $0)

# Parse arguments
ARGS=`getopt -o hf --long help,force -n "${ME}" -- "$@"`

if [ $? != 0 ] ; then
	usage 
fi
eval set -- "$ARGS"

while true ; do
	case "$1" in
		-h|--help) usage; shift ;;
		-f|--force) FORCE="yes"; shift ;;
		--) shift ; break ;;
		* ) usage "Invalid argument $1";;
	esac
done

# Remaining arguments are in $1, $2, etc. as normal

git branch 2>&1 | grep -i "Not a git repository" > /dev/null 2>/dev/null && die "Not a git repo"

GITDIR="$(git rev-parse --git-dir 2>/dev/null)"
if git-issvn > /dev/null 2>&1; then
	SVN="yes"
fi

if [ -z "${FORCE}" ]; then
	git status | grep clean > /dev/null || die "Current branch is not clean"
fi

BRANCH=$(git branch | grep "\*" | sed 's/\* //')

if [ "${BRANCH}" != "master" ]; then
	git checkout master
fi
echo "Updating master"
if [ -n "${SVN}" ]; then
	git svn rebase
else
	git pull --rebase
fi

if [ "${BRANCH}" != "master" ]; then
	echo "Updating ${BRANCH}"
	git checkout ${BRANCH}
	if [ -n "${SVN}" ]; then
		git svn rebase
	else
		git pull --rebase . master
	fi
fi
